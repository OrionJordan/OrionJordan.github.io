[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "qmd/graph/intro/definition.html",
    "href": "qmd/graph/intro/definition.html",
    "title": "Graphs",
    "section": "",
    "text": "A graph is a set of points called vertices connected by edges.\n(Insert graph example)\n\n\n\n\n\n\nDefinition\n\n\n\nA graph G = (V,E) is a mathematical structure consisting of a vertex set V(G) and an edge set E(G). Each edge e in the edge set connects two (not necessarily distinct) vertices known as the endpoints of e.\n\n\nAn edge is said to join its endpoints. Say an edge e connects two vertices u and v. u is said to be adjacent and a neighbor of v.\n\n\n\n\n\n\nExample\n\n\n\nThe vertex and edge sets of the graph in Figure 1.1.1 are\n\nV(G) = \\{a,b,c,d\\} \\quad\\quad\\quad\\quad E(G) = \\{ab,ac,ad,bc,bd,cd\\}\n\nNotice how we can denote an edge by concatenating its endpoints. This is only possible in cases where exclusively one edge exist between two vertices.\n\n\n\n\n\n\n\n\nDefinition\n\n\n\nAn edge e can be called\n\nA proper edge when the edge joins two distinct vertices\nA loop when e joins a vertex to itself\nA multi-edge when two or more edges connect the same two vertices\n\n\n\nThere are many instances in graph theory where our graphs are both loopless and devoid of multi-edges. In these cases we call the graph simple. If our graph is empty, we call it a null graph. If our graph contains one vertex and no edges, the graph is trivial."
  },
  {
    "objectID": "qmd/graph/graph1.html",
    "href": "qmd/graph/graph1.html",
    "title": "Definitions",
    "section": "",
    "text": "A graph is a set of points called vertices connected by edges."
  },
  {
    "objectID": "qmd/basics/sets.html",
    "href": "qmd/basics/sets.html",
    "title": "Sets",
    "section": "",
    "text": "A set is a collection of elements, usually denoted with a capital letter A,B,\\cdots,Z. Important groups of numbers are denoted in Blackboard bold font; for example the set \\mathbb{N}, which refers to the natural numbers. Sets are given the following notation\nA set S containing the numbers 1,2 and 3 as elements is wrote S = \\{1,2,3\\}. The order in which the elements are listed is irrelevant, S = \\{1,2,3\\} = \\{3,2,1\\}. This notation becomes tedious however when attempting to write a set with a large amount of elements. This is where set builder notation comes in. Set builder notation defines a set in the form\nS = \\{\\text{A function of}\\: x \\:|\\: \\text{A predicate of}\\: x\\}\nFor example, the set of all square numbers would be\nS = \\{ x^2 \\:|\\: x \\in \\mathbb{N}\\} = \\{1,4,9,\\ldots\\}\nThere are very commonly used sets we assume the existence of, and denote with special characters to save time\nDefinition: Given any set A, the of A, denoted \\mathcal{P}(\\mathbb{A}) is the set of all subsets of A; i.e.\n\\mathcal{P}(A) = \\{B | B \\subseteq A\\}\nFor example, if A = \\{a,b\\}, then \\mathcal{P}(A) = \\{\\{\\},\\{a\\},\\{b\\},\\{a,b\\}\\} Notice that \\varnothing and A are always elements of \\mathcal{P}(A). Also note a \\not\\in \\mathcal{P}(A), but \\{a\\} \\in \\mathcal{P}(A)."
  },
  {
    "objectID": "qmd/basics/sets.html#footnotes",
    "href": "qmd/basics/sets.html#footnotes",
    "title": "Sets",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe notation \\mathbb{Z} for integers comes from the German word Zahlen, which means integer.↩︎"
  },
  {
    "objectID": "qmd/basics/sets2.html",
    "href": "qmd/basics/sets2.html",
    "title": "Sets",
    "section": "",
    "text": "A set is a collection of elements, usually denoted with a capital letter A,B,\\cdots,Z. Important groups of numbers are denoted in Blackboard bold font; for example the set \\mathbb{N}, which refers to the natural numbers. Sets are given the following notation\nA set S containing the numbers 1,2 and 3 as elements is wrote S = \\{1,2,3\\}. The order in which the elements are listed is irrelevant, S = \\{1,2,3\\} = \\{3,2,1\\}. This notation becomes tedious however when attempting to write a set with a large amount of elements. This is where set builder notation comes in. Set builder notation defines a set in the form\nS = \\{\\text{A function of}\\: x \\:|\\: \\text{A predicate of}\\: x\\}\nFor example, the set of all square numbers would be\nS = \\{ x^2 \\:|\\: x \\in \\mathbb{N}\\} = \\{1,4,9,\\ldots\\}\nThere are very commonly used sets we assume the existence of, and denote with special characters to save time\nDefinition: Given any set A, the of A, denoted \\mathcal{P}(\\mathbb{A}) is the set of all subsets of A; i.e.\n\\mathcal{P}(A) = \\{B | B \\subseteq A\\}\nFor example, if A = \\{a,b\\}, then \\mathcal{P}(A) = \\{\\{\\},\\{a\\},\\{b\\},\\{a,b\\}\\} Notice that \\varnothing and A are always elements of \\mathcal{P}(A). Also note a \\not\\in \\mathcal{P}(A), but \\{a\\} \\in \\mathcal{P}(A)."
  },
  {
    "objectID": "qmd/basics/sets2.html#footnotes",
    "href": "qmd/basics/sets2.html#footnotes",
    "title": "Sets",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe notation \\mathbb{Z} for integers comes from the German word Zahlen, which means integer.↩︎"
  },
  {
    "objectID": "qmd/basics/sets1.html",
    "href": "qmd/basics/sets1.html",
    "title": "Sets",
    "section": "",
    "text": "A set is a collection of elements, usually denoted with a capital letter A,B,\\cdots,Z. Important groups of numbers are denoted in Blackboard bold font; for example the set \\mathbb{N}, which refers to the natural numbers. Sets are given the following notation\nA set S containing the numbers 1,2 and 3 as elements is wrote S = \\{1,2,3\\}. The order in which the elements are listed is irrelevant, S = \\{1,2,3\\} = \\{3,2,1\\}. This notation becomes tedious however when attempting to write a set with a large amount of elements. This is where set builder notation comes in. Set builder notation defines a set in the form\nS = \\{\\text{A function of}\\: x \\:|\\: \\text{A predicate of}\\: x\\}\nFor example, the set of all square numbers would be\nS = \\{ x^2 \\:|\\: x \\in \\mathbb{N}\\} = \\{1,4,9,\\ldots\\}\nThere are very commonly used sets we assume the existence of, and denote with special characters to save time\nDefinition: Given any set A, the of A, denoted \\mathcal{P}(\\mathbb{A}) is the set of all subsets of A; i.e.\n\\mathcal{P}(A) = \\{B | B \\subseteq A\\}\nFor example, if A = \\{a,b\\}, then \\mathcal{P}(A) = \\{\\{\\},\\{a\\},\\{b\\},\\{a,b\\}\\} Notice that \\varnothing and A are always elements of \\mathcal{P}(A). Also note a \\not\\in \\mathcal{P}(A), but \\{a\\} \\in \\mathcal{P}(A)."
  },
  {
    "objectID": "qmd/basics/sets1.html#footnotes",
    "href": "qmd/basics/sets1.html#footnotes",
    "title": "Sets",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe notation \\mathbb{Z} for integers comes from the German word Zahlen, which means integer.↩︎"
  },
  {
    "objectID": "qmd/graph/graph2.html",
    "href": "qmd/graph/graph2.html",
    "title": "graph",
    "section": "",
    "text": "A set is a collection of elements, usually denoted with a capital letter A,B,\\cdots,Z. Important groups of numbers are denoted in Blackboard bold font; for example the set \\mathbb{N}, which refers to the natural numbers. Sets are given the following notation\nA set S containing the numbers 1,2 and 3 as elements is wrote S = \\{1,2,3\\}. The order in which the elements are listed is irrelevant, S = \\{1,2,3\\} = \\{3,2,1\\}. This notation becomes tedious however when attempting to write a set with a large amount of elements. This is where set builder notation comes in. Set builder notation defines a set in the form\nS = \\{\\text{A function of}\\: x \\:|\\: \\text{A predicate of}\\: x\\}\nFor example, the set of all square numbers would be\nS = \\{ x^2 \\:|\\: x \\in \\mathbb{N}\\} = \\{1,4,9,\\ldots\\}\nThere are very commonly used sets we assume the existence of, and denote with special characters to save time\nDefinition: Given any set A, the of A, denoted \\mathcal{P}(\\mathbb{A}) is the set of all subsets of A; i.e.\n\\mathcal{P}(A) = \\{B | B \\subseteq A\\}\nFor example, if A = \\{a,b\\}, then \\mathcal{P}(A) = \\{\\{\\},\\{a\\},\\{b\\},\\{a,b\\}\\} Notice that \\varnothing and A are always elements of \\mathcal{P}(A). Also note a \\not\\in \\mathcal{P}(A), but \\{a\\} \\in \\mathcal{P}(A)."
  },
  {
    "objectID": "qmd/graph/graph2.html#footnotes",
    "href": "qmd/graph/graph2.html#footnotes",
    "title": "graph",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe notation \\mathbb{Z} for integers comes from the German word Zahlen, which means integer.↩︎"
  },
  {
    "objectID": "qmd/graph/GraphTheory.html",
    "href": "qmd/graph/GraphTheory.html",
    "title": "Graph Theory",
    "section": "",
    "text": "Graph Theory is the study of Graphs (Shocking) and their applications. The subject doesn’t require any real prerequisites, except some basic knowledge of naive set theory. Many problems in math and computer science can be modeled with graphs, despite seeming on the surface entirely unrelated. In fact, even chemist have begun to use graphs as a way to model molecules!\n\n§1. Introduction\nThis chapter begins with a history of and motivation for graph theory, and then introduces fundamental concepts and definitions."
  },
  {
    "objectID": "qmd/graph/GraphTheory.html#introduction",
    "href": "qmd/graph/GraphTheory.html#introduction",
    "title": "Graph Theory",
    "section": "§1. Introduction",
    "text": "§1. Introduction\nThis chapter introduces definitions and key concepts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Orions Online Math Notes",
    "section": "",
    "text": "A work in progress website documenting my varius math and lecture notes."
  },
  {
    "objectID": "qmd/graph/intro/definition.html#simple-graphs-vs.-general-graphs",
    "href": "qmd/graph/intro/definition.html#simple-graphs-vs.-general-graphs",
    "title": "Definitions",
    "section": "Simple Graphs vs. General Graphs",
    "text": "Simple Graphs vs. General Graphs\nMost of the theorems we will prove work better in cases where graphs lack certain properties\n\n\n\n\n\n\nDefinition\n\n\n\nAn edge e can be called\n\nA proper edge when the edge joins two distinct vertices\nA loop when 4 joins a vertex to itself\nA multi-edge when two or more edges connect the same two vertices\n\n\n\nThese definitions"
  },
  {
    "objectID": "qmd/graph/intro/definition.html#definition-1",
    "href": "qmd/graph/intro/definition.html#definition-1",
    "title": "Definitions",
    "section": "Definition",
    "text": "Definition\nAn edge e can be called\n\nA proper edge when the edge joins two distinct vertices\nA loop when e joins a vertex to itself\nA multi-edge when two or more edges connect the same two vertices"
  },
  {
    "objectID": "qmd/graph/intro/definition.html#what-is-a-graph",
    "href": "qmd/graph/intro/definition.html#what-is-a-graph",
    "title": "Definitions",
    "section": "",
    "text": "A graph is a set of points called vertices connected by edges.\n(Insert graph example)\n\n\n\n\n\n\nDefinition\n\n\n\nA graph G = (V,E) is a mathematical structure consisting of a vertex set V(G) and an edge set E(G). Each edge e in the edge set connects two (not necessarily distinct) vertices known as the endpoints of e.\n\n\nAn edge is said to join its endpoints. Say an edge e connects two vertices u and v. u is said to be adjacent and a neighbor of v.\n\n\n\n\n\n\nExample\n\n\n\nThe vertex and edge sets of the graph in Figure 1.1.1 are\n\nV(G) = \\{a,b,c,d\\} \\quad\\quad\\quad\\quad E(G) = \\{ab,ac,ad,bc,bd,cd\\}\n\nNotice how we can denote an edge by concatenating its endpoints. This is only possible in cases where exclusively one edge exist between two vertices.\n\n\n\n\n\n\n\n\nDefinition\n\n\n\nAn edge e can be called\n\nA proper edge when the edge joins two distinct vertices\nA loop when e joins a vertex to itself\nA multi-edge when two or more edges connect the same two vertices\n\n\n\nThere are many instances in graph theory where our graphs are both loopless and devoid of multi-edges. In these cases we call the graph simple. If our graph is empty, we call it a null graph. If our graph contains one vertex and no edges, the graph is trivial."
  },
  {
    "objectID": "qmd/graph/intro/definition.html#common-families-of-graphs",
    "href": "qmd/graph/intro/definition.html#common-families-of-graphs",
    "title": "Graphs",
    "section": "Common Families of Graphs",
    "text": "Common Families of Graphs\n\nComplete Graphs\n\n\n\n\n\n\nDefinition\n\n\n\nA complete graph is a simple graph where there exist an edge between every pair of distinct vertices. A complete graph with n vertices is notated K_n.\n\n\n(Insert picture of graphs K1 through K5)\n\n\n\n\n\n\nTheorem\n\n\n\nA complete graph K_n contains \\binom{n}{2} edges.\n\n\n\n\n\n\n\n\nProof\n\n\n\nThe graph K_n has an edge between every pair of distinct vertices. Because order doesn’t affect edges (e = uv is equivalent to e = vu), the number of edges is analougous to n choose 2, \\binom{n}{2}.\n\n\n\n\nBipartite Graphs\n\n\n\n\n\n\nDefinition\n\n\n\nA bipartite graph G is a simple graph whose vertex set can be partitioned into two subsets U and V, such that every edge in G has one endpoint in U, and one edpoint in V.\n\n\n(Insert picture of a few bipartite graphs)\n\n\n\n\n\n\nProposition\n\n\n\nA bipartite graph cannot contain any loops.\n\n\n\n\n\n\n\n\nProof\n\n\n\nIf an edge was loop, it would connect the same vertex to both endpoints, which contradicts our definition of a bipartite graph."
  },
  {
    "objectID": "qmd/graph/intro/definition.html#definition",
    "href": "qmd/graph/intro/definition.html#definition",
    "title": "Graphs",
    "section": "",
    "text": "A graph is a set of points called vertices connected by edges.\n(Insert graph example)\n\n\n\n\n\n\nDefinition\n\n\n\nA graph G = (V,E) is a mathematical structure consisting of a vertex set V(G) and an edge set E(G). Each edge e in the edge set connects two (not necessarily distinct) vertices known as the endpoints of e.\n\n\nAn edge is said to join its endpoints. Say an edge e connects two vertices u and v. u is said to be adjacent and a neighbor of v.\n\n\n\n\n\n\nExample\n\n\n\nThe vertex and edge sets of the graph in Figure 1.1.1 are\n\nV(G) = \\{a,b,c,d\\} \\quad\\quad\\quad\\quad E(G) = \\{ab,ac,ad,bc,bd,cd\\}\n\nNotice how we can denote an edge by concatenating its endpoints. This is only possible in cases where exclusively one edge exist between two vertices.\n\n\n\n\n\n\n\n\nDefinition\n\n\n\nAn edge e can be called\n\nA proper edge when the edge joins two distinct vertices\nA loop when e joins a vertex to itself\nA multi-edge when two or more edges connect the same two vertices\n\n\n\nThere are many instances in graph theory where our graphs are both loopless and devoid of multi-edges. In these cases we call the graph simple. If our graph is empty, we call it a null graph. If our graph contains one vertex and no edges, the graph is trivial."
  },
  {
    "objectID": "qmd/graph/GraphTheory.html#history",
    "href": "qmd/graph/GraphTheory.html#history",
    "title": "Graph Theory",
    "section": "§1.1 History",
    "text": "§1.1 History\nThis section explains the history and motivation behind Graph Theory."
  },
  {
    "objectID": "qmd/graph/GraphTheory.html#graphs",
    "href": "qmd/graph/GraphTheory.html#graphs",
    "title": "Graph Theory",
    "section": "§1.2 Graphs",
    "text": "§1.2 Graphs\nThis section explains what a graph is, common families of graphs,,"
  },
  {
    "objectID": "qmd/graph/GraphTheory.html#paths-trails-cycles",
    "href": "qmd/graph/GraphTheory.html#paths-trails-cycles",
    "title": "Graph Theory",
    "section": "§1.3 Paths, Trails, Cycles",
    "text": "§1.3 Paths, Trails, Cycles"
  },
  {
    "objectID": "qmd/graph/intro/graphs.html",
    "href": "qmd/graph/intro/graphs.html",
    "title": "Graphs",
    "section": "",
    "text": "Code\n\\begin{tikzpicture}\n  \\draw (0,0) circle (1cm);\n  \\draw (0,0) circle (2cm);\n\\end{tikzpicture}"
  },
  {
    "objectID": "qmd/graph/intro/graphs.html#definition",
    "href": "qmd/graph/intro/graphs.html#definition",
    "title": "Graphs",
    "section": "Definition",
    "text": "Definition\nA graph is a set of points called vertices connected by edges.\n(Insert graph example)\n\n\n\n\n\n\nDefinition\n\n\n\nA graph G = (V,E) is a mathematical structure consisting of a vertex set V(G) and an edge set E(G). Each edge e in the edge set connects two (not necessarily distinct) vertices known as the endpoints of e.\n\n\nAn edge is said to join its endpoints. Say an edge e connects two vertices u and v. u is said to be adjacent and a neighbor of v.\n\n\n\n\n\n\nExample\n\n\n\nThe vertex and edge sets of the graph in Figure 1.1.1 are\n\nV(G) = \\{a,b,c,d\\} \\quad\\quad\\quad\\quad E(G) = \\{ab,ac,ad,bc,bd,cd\\}\n\nNotice how we can denote an edge by concatenating its endpoints. This is only possible in cases where exclusively one edge exist between two vertices.\n\n\n\n\n\n\n\n\nDefinition\n\n\n\nAn edge e can be called\n\nA proper edge when the edge joins two distinct vertices\nA loop when e joins a vertex to itself\nA multi-edge when two or more edges connect the same two vertices\n\n\n\nThere are many instances in graph theory where our graphs are both loopless and devoid of multi-edges. In these cases we call the graph simple. If our graph is empty, we call it a null graph. If our graph contains one vertex and no edges, the graph is trivial."
  },
  {
    "objectID": "qmd/graph/intro/graphs.html#common-families-of-graphs",
    "href": "qmd/graph/intro/graphs.html#common-families-of-graphs",
    "title": "Graphs",
    "section": "Common Families of Graphs",
    "text": "Common Families of Graphs\n\nComplete Graphs\n\n\n\n\n\n\nDefinition\n\n\n\nA complete graph is a simple graph where there exist an edge between every pair of distinct vertices. A complete graph with n vertices is notated K_n.\n\n\n(Insert picture of graphs K1 through K5)\n\n\n\n\n\n\nTheorem\n\n\n\nA complete graph K_n contains \\binom{n}{2} edges.\n\n\n\n\n\n\n\n\nProof\n\n\n\nThe graph K_n has an edge between every pair of distinct vertices. Because order doesn’t affect edges (e = uv is equivalent to e = vu), the number of edges is analougous to n choose 2, \\binom{n}{2}.\n\n\n\n\nBipartite Graphs\n\n\n\n\n\n\nDefinition\n\n\n\nA bipartite graph G is a simple graph whose vertex set can be partitioned into two subsets U and V, such that every edge in G has one endpoint in U, and one edpoint in V.\n\n\n(Insert picture of a few bipartite graphs)\n\n\n\n\n\n\nProposition\n\n\n\nA bipartite graph cannot contain any loops.\n\n\n\n\n\n\n\n\nProof\n\n\n\nIf an edge was loop, it would connect the same vertex to both endpoints, which contradicts our definition of a bipartite graph.\n\n\n\n\n\n\n\n\nDefinition\n\n\n\nA complete bipartite graph G is a simple bipartite graph such that every vertex in one of the bipartition subsets is joined to every other vertex in the other bipartite subset. A complete bipartite graph is notated K_{m,n} where m is the number of vertices in one of the graphs bipartite set, and n is the number of vertices in the other.\n\n\n(Example of a complete bipartite graph)\n\n\nRegular Graphs\nTo look at regular graphs, we first have to look at"
  },
  {
    "objectID": "qmd/graph/intro/paths.html",
    "href": "qmd/graph/intro/paths.html",
    "title": "Definitions",
    "section": "",
    "text": "A graph is a set of points called vertices connected by edges.\n(Insert graph example)\n\n\n\n\n\n\nDefinition\n\n\n\nA graph G = (V,E) is a mathematical structure consisting of a vertex set V(G) and an edge set E(G). Each edge e in the edge set connects two (not necessarily distinct) vertices known as the endpoints of e.\n\n\nAn edge is said to join its endpoints. Say an edge e connects two vertices u and v. u is said to be adjacent and a neighbor of v.\n\n\n\n\n\n\nExample\n\n\n\nThe vertex and edge sets of the graph in Figure 1.1.1 are\n\nV(G) = \\{a,b,c,d\\} \\quad\\quad\\quad\\quad E(G) = \\{ab,ac,ad,bc,bd,cd\\}\n\nNotice how we can denote an edge by concatenating its endpoints. This is only possible in cases where exclusively one edge exist between two vertices.\n\n\n\n\n\n\n\n\nDefinition\n\n\n\nAn edge e can be called\n\nA proper edge when the edge joins two distinct vertices\nA loop when e joins a vertex to itself\nA multi-edge when two or more edges connect the same two vertices\n\n\n\nThere are many instances in graph theory where our graphs are both loopless and devoid of multi-edges. In these cases we call the graph simple. If our graph is empty, we call it a null graph. If our graph contains one vertex and no edges, the graph is trivial."
  },
  {
    "objectID": "qmd/graph/intro/paths.html#what-is-a-graph",
    "href": "qmd/graph/intro/paths.html#what-is-a-graph",
    "title": "Definitions",
    "section": "",
    "text": "A graph is a set of points called vertices connected by edges.\n(Insert graph example)\n\n\n\n\n\n\nDefinition\n\n\n\nA graph G = (V,E) is a mathematical structure consisting of a vertex set V(G) and an edge set E(G). Each edge e in the edge set connects two (not necessarily distinct) vertices known as the endpoints of e.\n\n\nAn edge is said to join its endpoints. Say an edge e connects two vertices u and v. u is said to be adjacent and a neighbor of v.\n\n\n\n\n\n\nExample\n\n\n\nThe vertex and edge sets of the graph in Figure 1.1.1 are\n\nV(G) = \\{a,b,c,d\\} \\quad\\quad\\quad\\quad E(G) = \\{ab,ac,ad,bc,bd,cd\\}\n\nNotice how we can denote an edge by concatenating its endpoints. This is only possible in cases where exclusively one edge exist between two vertices.\n\n\n\n\n\n\n\n\nDefinition\n\n\n\nAn edge e can be called\n\nA proper edge when the edge joins two distinct vertices\nA loop when e joins a vertex to itself\nA multi-edge when two or more edges connect the same two vertices\n\n\n\nThere are many instances in graph theory where our graphs are both loopless and devoid of multi-edges. In these cases we call the graph simple. If our graph is empty, we call it a null graph. If our graph contains one vertex and no edges, the graph is trivial."
  },
  {
    "objectID": "qmd/graph/intro/paths.html#common-families-of-graphs",
    "href": "qmd/graph/intro/paths.html#common-families-of-graphs",
    "title": "Definitions",
    "section": "Common Families of Graphs",
    "text": "Common Families of Graphs\n\nComplete Graphs\n\n\n\n\n\n\nDefinition\n\n\n\nA complete graph is a simple graph where there exist an edge between every pair of distinct vertices. A complete graph with n vertices is notated K_n.\n\n\n(Insert picture of graphs K1 through K5)\n\n\n\n\n\n\nTheorem\n\n\n\nA complete graph K_n contains \\binom{n}{2} edges.\n\n\n\n\n\n\n\n\nProof\n\n\n\nThe graph K_n has an edge between every pair of distinct vertices. Because order doesn’t affect edges (e = uv is equivalent to e = vu), the number of edges is analougous to n choose 2, \\binom{n}{2}.\n\n\n\n\nBipartite Graphs\n\n\n\n\n\n\nDefinition\n\n\n\nA bipartite graph G is a simple graph whose vertex set can be partitioned into two subsets U and V, such that every edge in G has one endpoint in U, and one edpoint in V.\n\n\n(Insert picture of a few bipartite graphs)\n\n\n\n\n\n\nProposition\n\n\n\nA bipartite graph cannot contain any loops.\n\n\n\n\n\n\n\n\nProof\n\n\n\nIf an edge was loop, it would connect the same vertex to both endpoints, which contradicts our definition of a bipartite graph."
  },
  {
    "objectID": "qmd/graph/trees/trees.html",
    "href": "qmd/graph/trees/trees.html",
    "title": "Trees",
    "section": "",
    "text": "Recall that there are \\binom{n}{2}^2 graphs on n vertices.\nQuestion: How many trees are there on n vertices?\nThis question is not at all obvious, and has a suprisingly simple solution! We’ll count trees as distinct if their graphs are distinct, i.e. two isomorphic trees will be counted as distinct.\n(Give example on K_3)\nIn order to solve this question, we’ll first establish the concept of a prüfer code\n\n\nTake any tree T. The need may occasionally arise where we wish to represent T as a sequence of integers, similar to degree sequences for graphs.\n\n\n\n\n\n\nDefinition (Cayley’s Theorem)\n\n\n\nA prüfer code is a sequence of length n-2 of integers in \\{1,2,\\ldots,n\\} that corresponds to a tree of n.\n\n\nWe’re claiming that any tree can be represented by a prüfer code. In order to find the prüfer code for a tree, we use the following algorithm.\n\n\n\n\n\n\nAlgorithm\n\n\n\nGiven a tree T on n vertices, delete the least leaf of T and record the vertex that this leaf was adjacent to in T. Continue until the tree has 2 vertices.\n\n\n\n\n\n\n\n\nExample\n\n\n\n(Give two examples of the algorithm)\n\n\nWe can now represent every tree as a prüfer code. What makes prüfer code so useful is that unlike degree sequences, every distinct tree has a unique prüfer code."
  },
  {
    "objectID": "qmd/graph/trees/trees.html#cayleys-theorem",
    "href": "qmd/graph/trees/trees.html#cayleys-theorem",
    "title": "Trees",
    "section": "",
    "text": "Recall that there are \\binom{n}{2}^2 graphs on n vertices.\nQuestion: How many trees are there on n vertices?\nThis question is not at all obvious, and has a suprisingly simple solution! We’ll count trees as distinct if their graphs are distinct, i.e. two isomorphic trees will be counted as distinct.\n(Give example on K_3)\nIn order to solve this question, we’ll first establish the concept of a prüfer code\n\n\nTake any tree T. The need may occasionally arise where we wish to represent T as a sequence of integers, similar to degree sequences for graphs.\n\n\n\n\n\n\nDefinition (Cayley’s Theorem)\n\n\n\nA prüfer code is a sequence of length n-2 of integers in \\{1,2,\\ldots,n\\} that corresponds to a tree of n.\n\n\nWe’re claiming that any tree can be represented by a prüfer code. In order to find the prüfer code for a tree, we use the following algorithm.\n\n\n\n\n\n\nAlgorithm\n\n\n\nGiven a tree T on n vertices, delete the least leaf of T and record the vertex that this leaf was adjacent to in T. Continue until the tree has 2 vertices.\n\n\n\n\n\n\n\n\nExample\n\n\n\n(Give two examples of the algorithm)\n\n\nWe can now represent every tree as a prüfer code. What makes prüfer code so useful is that unlike degree sequences, every distinct tree has a unique prüfer code."
  },
  {
    "objectID": "qmd/graph/trees/trees.html#theorem-cayleys-theorem",
    "href": "qmd/graph/trees/trees.html#theorem-cayleys-theorem",
    "title": "Trees",
    "section": "Theorem (Cayley’s Theorem)",
    "text": "Theorem (Cayley’s Theorem)\nThere are exactly n^{n-2} many trees on n vertices\n:::\n\n\n\n\n\n\nProof\n\n\n\nA prüfer code is a sequence of length n-2 of integers in \\{1,2,\\ldots,n\\}.\nGiven a tree T on n vertices, we will associate to T a prüfer code according to the following algorithm.\nAlgorithm: Given a tree T on n vertices, delete the least leaf of T and record the vertex that this leaf was adjacent to in T. Continue until the tree has 2 vertices.\n(Give example of the algorithm.)"
  }
]